version: "3"
services:
  api:
    build:
      context: ..
      dockerfile: ./cmd/api/Dockerfile
    platform: linux/{{platform}}
    entrypoint: ["./with-postgres.sh", "./api"]
    environment:
      - IMPL=mesa
      - HTTP_PORT=8080
      - DB_HOST=database 
      - DB_POST=5432
      - DB_USER=dev_user
      - DB_PASS=dev_password
      - DB_NAME=dev_database
      - REGISTRY_ETHENDPOINT=wss://opt-kovan.g.alchemy.com/v2/${KOVAN_ALCHEMY_API_KEY:?You must provide a KOVAN Alchemy API KEY}
      - REGISTRY_CHAINID=69
      - REGISTRY_CONTRACTADDRESS=0x06E54Aa21496Ed0099219ea79a2c72247F36091A # Current supported SC is `eth-tableland@c43b49a`.
      - SIGNER_PRIVATEKEY=7393d9c3f7d442326e09809558cc5a5da042b84eeb793cf30c47f2c529367fd5
      - EVENTFEED_MINBLOCKDEPTH=0
      - EVENTFEED_MAXBLOCKSFETCHSIZE=100000
      - NONCETRACKER_MINBLOCKDEPTH=0
      - METRICS_PORT=9090
      - LOG_HUMAN=true
      - LOG_DEBUG=true
      - ADMINAPI_USERNAME=admin_user
      - ADMINAPI_PASSWORD=admin_password
      - POSTGRES_USER=postgres # used only in with-postgres.sh
      - POSTGRES_PASSWORD=postgres # used only in with-postgres.sh
      - OTEL_SERVICE_NAME=tableland:api # this is just to the unknown_service from the metrics label
    ports:
      - "127.0.0.1:8080:8080" 
      - "127.0.0.1:9090:9090"
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
  database:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    platform: linux/{{platform}}
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    command:
      - "postgres"
      - "-c"
      - "compute_query_id=auto"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5