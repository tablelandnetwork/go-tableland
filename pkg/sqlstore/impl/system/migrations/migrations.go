// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
// migrations/002_add_type_column.down.sql
// migrations/002_add_type_column.up.sql
// migrations/003_auth.down.sql
// migrations/003_auth.up.sql
// migrations/004_add_last_seen.down.sql
// migrations/004_add_last_seen.up.sql
// migrations/005_mul_changes.down.sql
// migrations/005_mul_changes.up.sql
// migrations/006_rename_system_tables.down.sql
// migrations/006_rename_system_tables.up.sql
// migrations/007_acl.down.sql
// migrations/007_acl.up.sql
// migrations/008_txn_processor.down.sql
// migrations/008_txn_processor.up.sql
// migrations/009_nonce.down.sql
// migrations/009_nonce.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x63\xc3\x98\x16\x19\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 25, mode: os.FileMode(420), modTime: time.Unix(1639484913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbd\x0a\xc2\x30\x14\x47\xf1\xbd\x4f\xf1\x1f\x5b\x70\x12\x37\xa7\x6b\x7b\x8b\xc1\xf4\x83\xf4\x06\xed\x54\xaa\xcd\x20\x54\x0b\x49\x3a\xf8\xf6\x42\x11\xe7\xf3\xe3\xe4\x86\x49\x18\x42\x27\xcd\x50\x25\xea\x46\xc0\x37\xd5\x49\x87\xf0\x09\xd1\xbd\x86\x38\xde\x67\x17\x90\x26\x00\xb0\xae\xcf\x09\xd6\xaa\x02\xad\x51\x15\x99\x1e\x17\xee\x77\x5b\x7a\x2c\xef\xe8\x97\x79\x76\x1e\xf9\x99\x4c\x7a\xd8\x67\xdb\xad\xb6\x5a\xff\x84\x77\x63\x74\xd3\x30\x46\x88\xaa\xb8\x13\xaa\xda\x3f\x41\xc1\x25\x59\x2d\xa8\x9b\x6b\x9a\x25\xd9\x31\xf9\x06\x00\x00\xff\xff\xf0\xb8\x01\x4a\x9b\x00\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 155, mode: os.FileMode(420), modTime: time.Unix(1639484913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_add_type_columnDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xa9\x2c\x48\xb5\x06\x04\x00\x00\xff\xff\xc5\x40\xfa\x41\x2b\x00\x00\x00")

func _002_add_type_columnDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_add_type_columnDownSql,
		"002_add_type_column.down.sql",
	)
}

func _002_add_type_columnDownSql() (*asset, error) {
	bytes, err := _002_add_type_columnDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add_type_column.down.sql", size: 43, mode: os.FileMode(420), modTime: time.Unix(1642424618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_add_type_columnUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xa9\x2c\x48\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x36\xd2\x54\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xb7\x06\x04\x00\x00\xff\xff\xcb\x6f\x28\xcf\x41\x00\x00\x00")

func _002_add_type_columnUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_add_type_columnUpSql,
		"002_add_type_column.up.sql",
	)
}

func _002_add_type_columnUpSql() (*asset, error) {
	bytes, err := _002_add_type_columnUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add_type_column.up.sql", size: 65, mode: os.FileMode(420), modTime: time.Unix(1642424618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_authDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x4f\x2c\x2d\xc9\xb0\x06\x04\x00\x00\xff\xff\x05\x69\x1f\x3a\x17\x00\x00\x00")

func _003_authDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_authDownSql,
		"003_auth.down.sql",
	)
}

func _003_authDownSql() (*asset, error) {
	bytes, err := _003_authDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_auth.down.sql", size: 23, mode: os.FileMode(420), modTime: time.Unix(1643380989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_authUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x31\x0a\xc3\x20\x18\x05\xe0\xdd\x53\xbc\x31\x81\xde\xa0\x93\x6d\xff\x80\x54\x4d\xd0\x17\x9a\x4c\x41\xaa\xd0\xa5\x4b\xb4\x43\x6f\x1f\xc8\xfc\xc1\x77\x0f\xa2\x29\xa0\xbe\x59\x81\x19\xe0\x47\x42\x16\x13\x19\x51\xff\xb5\x95\xef\x96\x7e\xed\x83\x4e\x01\x40\xca\x79\x2f\xb5\x82\xb2\x10\x53\x30\x4e\x87\x15\x4f\x59\x2f\xa7\xbe\xf7\x92\x5a\xc9\x5b\x6a\xa0\x71\x12\xa9\xdd\x74\x7e\x7e\xb6\x16\x0f\x19\xf4\x6c\x09\x3f\xbe\xba\x5e\xf5\x57\x75\x04\x00\x00\xff\xff\x41\x41\x30\x05\x7a\x00\x00\x00")

func _003_authUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_authUpSql,
		"003_auth.up.sql",
	)
}

func _003_authUpSql() (*asset, error) {
	bytes, err := _003_authUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_auth.up.sql", size: 122, mode: os.FileMode(420), modTime: time.Unix(1643380989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_add_last_seenDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x4f\x2c\x2d\xc9\xe0\x72\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\x2e\x89\x2f\x4e\x4d\xcd\xd3\x41\x11\x4e\x2e\x4a\x4d\x2c\x49\x8d\x2f\x49\x4c\xca\x49\x8d\x4f\xce\x2f\xcd\x2b\x41\x95\x2f\x2a\xcd\x8b\x2f\x2e\xcc\x81\x48\x59\x73\x01\x02\x00\x00\xff\xff\x22\x83\x83\x02\x6a\x00\x00\x00")

func _004_add_last_seenDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_add_last_seenDownSql,
		"004_add_last_seen.down.sql",
	)
}

func _004_add_last_seenDownSql() (*asset, error) {
	bytes, err := _004_add_last_seenDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_add_last_seen.down.sql", size: 106, mode: os.FileMode(420), modTime: time.Unix(1643807505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_add_last_seenUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcb\xb1\x0a\x02\x31\x0c\x00\xd0\xdd\xaf\xc8\x07\x38\xb8\x3b\x55\x1b\xe5\x20\xed\xc9\x99\xce\xa5\x1e\x01\x87\x5a\xf1\x92\x0e\xfe\xbd\x83\x20\x3a\xb9\xbf\xe7\x88\x71\x02\x76\x3b\x42\xd0\xa7\x9a\xdc\x72\xe9\x76\x5d\x39\xef\x61\x3f\x52\x0a\x11\x6a\x51\xcb\x2a\xd2\x80\x87\x80\x67\x76\xe1\x04\x1e\x0f\x2e\x11\x43\x4c\x44\xeb\x6f\x3c\x2f\x52\x4c\xb2\x95\x4b\x95\x3c\xdf\x7b\x33\x18\x22\xe3\x11\x27\x88\xe3\xdb\x7f\xf2\xe6\x67\x2e\xbd\x65\x7d\xd4\xbf\x69\xfb\x0a\x00\x00\xff\xff\x6a\x5a\x53\xf4\xb3\x00\x00\x00")

func _004_add_last_seenUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_add_last_seenUpSql,
		"004_add_last_seen.up.sql",
	)
}

func _004_add_last_seenUpSql() (*asset, error) {
	bytes, err := _004_add_last_seenUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_add_last_seen.up.sql", size: 179, mode: os.FileMode(420), modTime: time.Unix(1643807505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_mul_changesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\xae\x82\x30\x18\xc5\xf1\x9d\xa7\x38\x1b\xf7\xae\x3a\x32\x7d\xd2\x1a\x89\x45\x48\x43\x4d\x98\x0c\xd2\x0e\x4d\x04\x49\xfb\x75\xe0\xed\x9d\x5c\x4d\xf7\xdf\x39\x7f\x52\x83\xd4\x18\xe8\xa4\x24\xe2\x1e\xd9\x2d\x0f\x9e\x9e\x2f\x17\x21\x74\xd7\xa3\xee\x94\x69\x6f\x58\xa7\xc5\x55\x45\x9e\xb5\x2e\xce\xc1\x6f\xec\xdf\x6b\xee\x24\x72\x48\x33\xa7\x90\xdd\xf0\xf6\x97\x24\x21\xbe\x90\xf7\xcd\xe1\x4e\xf5\x85\xf4\xdf\xf1\xf0\x0f\x21\xcf\x64\xd4\x80\xb2\xcc\x3c\x48\xc9\x5b\x18\xd3\x08\xf4\xba\x69\x49\x8f\xb8\xca\xb1\x2a\x3e\x01\x00\x00\xff\xff\x5e\x26\x53\xb7\x37\x01\x00\x00")

func _005_mul_changesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_mul_changesDownSql,
		"005_mul_changes.down.sql",
	)
}

func _005_mul_changesDownSql() (*asset, error) {
	bytes, err := _005_mul_changesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_mul_changes.down.sql", size: 311, mode: os.FileMode(420), modTime: time.Unix(1644351777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_mul_changesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\x3d\x8b\x83\x30\x1c\xc7\xf1\xdd\x57\xf1\x1f\x75\xcb\xc1\x9d\xcb\x71\x07\x69\x0c\x28\xc6\x28\x41\x0b\x4e\xc5\x9a\x0c\x01\x9f\xc8\xc3\xe0\xbb\xef\xd4\x4a\x97\x92\xd2\xfd\xf7\xfd\xc0\x0f\xb3\x96\x0a\x68\xf1\x89\x51\xb0\xbb\x75\x6a\xbe\xb8\xe1\x3a\x29\x0b\x99\xa8\x1b\x20\x35\xeb\x2a\x0e\x6e\xdf\xd4\x6f\x14\xb6\xf5\x5e\xcb\xd0\xed\xb8\x2e\xce\xac\xd3\xa4\xcc\xab\x02\x67\xd9\x3d\xd0\x12\x78\x57\x51\x51\x90\x38\x45\x09\x34\xa2\xa8\xb0\xe8\xa1\xa4\x3d\x90\x9c\x92\x12\x62\x2d\xe1\xff\x0f\x50\x12\x08\x5a\x67\xfc\xe8\xbc\x51\x70\xc6\x82\xe4\x58\xc4\xe9\x77\x02\xbc\x6e\x81\x77\x8c\x05\x22\xc7\x8d\x4f\x14\xa9\xec\x68\xf4\xe6\xf4\xba\x3c\x98\x2f\x84\xde\x76\x96\x61\x3e\xde\xfc\x3c\xf5\xd1\x2d\x00\x00\xff\xff\x21\x31\xf0\x51\xef\x01\x00\x00")

func _005_mul_changesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_mul_changesUpSql,
		"005_mul_changes.up.sql",
	)
}

func _005_mul_changesUpSql() (*asset, error) {
	bytes, err := _005_mul_changesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_mul_changes.up.sql", size: 495, mode: os.FileMode(420), modTime: time.Unix(1644351777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __006_rename_system_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x4d\xcf\x2c\x2e\x29\xaa\x54\x08\x72\xf5\x73\xf4\x75\x55\x08\xf1\x57\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x72\x91\x5f\x1b\x2d\x00\x00\x00")

func _006_rename_system_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__006_rename_system_tablesDownSql,
		"006_rename_system_tables.down.sql",
	)
}

func _006_rename_system_tablesDownSql() (*asset, error) {
	bytes, err := _006_rename_system_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "006_rename_system_tables.down.sql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1645636858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __006_rename_system_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\x56\x08\x72\xf5\x73\xf4\x75\x55\x08\xf1\x57\x28\x4a\x4d\xcf\x2c\x2e\x29\xaa\xb4\x06\x04\x00\x00\xff\xff\x71\x64\x77\x61\x2d\x00\x00\x00")

func _006_rename_system_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__006_rename_system_tablesUpSql,
		"006_rename_system_tables.up.sql",
	)
}

func _006_rename_system_tablesUpSql() (*asset, error) {
	bytes, err := _006_rename_system_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "006_rename_system_tables.up.sql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1645636858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __007_aclDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x4f\x4c\xce\xb1\x06\x04\x00\x00\xff\xff\xa9\xfc\x80\xcd\x16\x00\x00\x00")

func _007_aclDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__007_aclDownSql,
		"007_acl.down.sql",
	)
}

func _007_aclDownSql() (*asset, error) {
	bytes, err := _007_aclDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "007_acl.down.sql", size: 22, mode: os.FileMode(420), modTime: time.Unix(1649686607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __007_aclUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x4f\xc2\x40\x14\x84\xef\xfb\x2b\xe6\x46\x9b\xf4\xe0\xc9\x0b\xa7\xa5\xbe\xea\xc6\xee\x96\xec\x3e\x14\x62\x0c\xa9\x74\x43\x9a\x54\x21\xdb\x55\x43\x8c\xff\xdd\x00\x4a\x51\xcf\xf3\xcd\xbc\x37\x33\xa1\x6b\x65\xc6\x42\xe4\x96\x24\x13\x58\x4e\x4a\x82\x2a\x60\x2a\x06\xcd\x95\x63\x87\x7e\xd7\x47\xff\xbc\xac\x57\x1d\x12\x01\x00\xb1\x7e\xea\xfc\xb2\x6d\x60\x66\x9a\xac\xca\x93\xcb\x8b\x14\x96\x0a\xb2\x64\x72\x72\x08\x7e\xdd\xf6\x31\xec\x92\xb6\x49\xb3\x83\x63\xb5\x79\x89\x61\xd3\x75\x3e\x80\x69\xce\x87\x74\x33\x2b\xcb\xa3\xba\x0d\xed\x5b\xdb\xf9\xb5\xef\x71\x27\x6d\x7e\x23\xed\xc3\xe3\x1f\x64\x15\x7c\x1d\x7d\xb3\xac\x23\x58\x69\x72\x2c\xf5\xf4\x84\xe0\x8a\x0a\x39\x2b\xf7\xb1\xf7\xc9\xf7\xc5\xd7\x6d\xf3\xcf\x70\x54\xa6\x56\x69\x69\x17\xb8\xa5\x45\xf2\xd3\x24\x3b\xfb\x30\x15\xe9\x58\x08\x65\x1c\x59\x86\x32\x5c\xfd\x1a\x60\xe0\x32\x0c\xee\xa1\x41\x0a\x47\x25\xe5\x8c\x73\x70\x8f\x8c\x3e\xea\x0c\xef\x19\x9a\xcf\x11\x0a\x5b\xe9\xd3\x4a\xfb\xf1\x2b\xad\x15\x8f\xc5\x57\x00\x00\x00\xff\xff\x09\x7e\x83\x58\x8d\x01\x00\x00")

func _007_aclUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__007_aclUpSql,
		"007_acl.up.sql",
	)
}

func _007_aclUpSql() (*asset, error) {
	bytes, err := _007_aclUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "007_acl.up.sql", size: 397, mode: os.FileMode(420), modTime: time.Unix(1649686607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __008_txn_processorDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\xa9\xc8\x8b\x2f\x28\xca\x4f\x4e\x2d\x2e\xce\x2f\xb2\xe6\x02\x04\x00\x00\xff\xff\xe2\xfa\x6b\xaa\x21\x00\x00\x00")

func _008_txn_processorDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__008_txn_processorDownSql,
		"008_txn_processor.down.sql",
	)
}

func _008_txn_processorDownSql() (*asset, error) {
	bytes, err := _008_txn_processorDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "008_txn_processor.down.sql", size: 33, mode: os.FileMode(420), modTime: time.Unix(1649780323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __008_txn_processorUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\xa9\xc8\x8b\x2f\x28\xca\x4f\x4e\x2d\x2e\xce\x2f\x52\xd0\xe0\x52\x50\x50\x50\x48\xca\xc9\x4f\xce\x8e\xcf\x2b\xcd\x4d\x4a\x2d\x52\x48\xca\x4c\xcf\xcc\x2b\xe1\xd2\xb4\xe6\x02\x04\x00\x00\xff\xff\x70\xbe\xb7\x18\x4d\x00\x00\x00")

func _008_txn_processorUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__008_txn_processorUpSql,
		"008_txn_processor.up.sql",
	)
}

func _008_txn_processorUpSql() (*asset, error) {
	bytes, err := _008_txn_processorUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "008_txn_processor.up.sql", size: 77, mode: os.FileMode(420), modTime: time.Unix(1649780323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __009_nonceDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\xcf\xcb\xcf\x4b\x4e\xb5\xe6\x02\x04\x00\x00\xff\xff\xf3\x59\xd1\x1b\x19\x00\x00\x00")

func _009_nonceDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__009_nonceDownSql,
		"009_nonce.down.sql",
	)
}

func _009_nonceDownSql() (*asset, error) {
	bytes, err := _009_nonceDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "009_nonce.down.sql", size: 25, mode: os.FileMode(420), modTime: time.Unix(1649870079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __009_nonceUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbd\x4e\x85\x40\x10\x85\xfb\x7d\x8a\x53\x42\xc2\x1b\x58\xa1\x59\x13\xe2\x6f\xb8\x5b\x78\x2b\x32\xb2\x23\x6c\x84\x81\xec\x0e\xa2\x6f\x6f\x14\x6d\x34\x86\x98\xdc\xfa\x9b\x9c\x73\xbe\xb9\xa8\x6d\xe9\x2c\x5c\x79\x7e\x6d\x51\x5d\xe2\xf6\xce\xc1\x3e\x54\x07\x77\x40\x7a\x4b\xca\x63\x23\x93\xb4\x8c\xcc\x00\x80\xb0\xae\x53\x7c\xc6\x0b\xc5\xb6\xa7\x08\x99\x14\xb2\x0c\x43\xf1\x49\xc9\xfb\xc8\x29\xfd\x41\xb7\x9c\xc7\xd0\x05\xd1\x1f\xe8\xbe\xae\x6e\xca\xfa\x88\x2b\x7b\x44\xf6\xd5\x51\x7c\xc7\xe5\x26\x3f\x33\x66\x7f\xe7\xcc\xe2\x83\x74\x8d\xbe\x9e\x60\x6c\x4f\xa9\xff\x8d\xb0\x27\xd2\x46\x26\x65\xdf\x90\x42\xc3\xc8\x49\x69\x9c\xe1\xf9\x89\x96\xe1\xe3\x74\xcd\xf2\xff\x98\x17\x5b\xd5\xf6\x80\xf7\x00\x00\x00\xff\xff\xcb\x5a\x18\x9d\xa9\x01\x00\x00")

func _009_nonceUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__009_nonceUpSql,
		"009_nonce.up.sql",
	)
}

func _009_nonceUpSql() (*asset, error) {
	bytes, err := _009_nonceUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "009_nonce.up.sql", size: 425, mode: os.FileMode(420), modTime: time.Unix(1649970887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql":                 _001_initDownSql,
	"001_init.up.sql":                   _001_initUpSql,
	"002_add_type_column.down.sql":      _002_add_type_columnDownSql,
	"002_add_type_column.up.sql":        _002_add_type_columnUpSql,
	"003_auth.down.sql":                 _003_authDownSql,
	"003_auth.up.sql":                   _003_authUpSql,
	"004_add_last_seen.down.sql":        _004_add_last_seenDownSql,
	"004_add_last_seen.up.sql":          _004_add_last_seenUpSql,
	"005_mul_changes.down.sql":          _005_mul_changesDownSql,
	"005_mul_changes.up.sql":            _005_mul_changesUpSql,
	"006_rename_system_tables.down.sql": _006_rename_system_tablesDownSql,
	"006_rename_system_tables.up.sql":   _006_rename_system_tablesUpSql,
	"007_acl.down.sql":                  _007_aclDownSql,
	"007_acl.up.sql":                    _007_aclUpSql,
	"008_txn_processor.down.sql":        _008_txn_processorDownSql,
	"008_txn_processor.up.sql":          _008_txn_processorUpSql,
	"009_nonce.down.sql":                _009_nonceDownSql,
	"009_nonce.up.sql":                  _009_nonceUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql":                 &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":                   &bintree{_001_initUpSql, map[string]*bintree{}},
	"002_add_type_column.down.sql":      &bintree{_002_add_type_columnDownSql, map[string]*bintree{}},
	"002_add_type_column.up.sql":        &bintree{_002_add_type_columnUpSql, map[string]*bintree{}},
	"003_auth.down.sql":                 &bintree{_003_authDownSql, map[string]*bintree{}},
	"003_auth.up.sql":                   &bintree{_003_authUpSql, map[string]*bintree{}},
	"004_add_last_seen.down.sql":        &bintree{_004_add_last_seenDownSql, map[string]*bintree{}},
	"004_add_last_seen.up.sql":          &bintree{_004_add_last_seenUpSql, map[string]*bintree{}},
	"005_mul_changes.down.sql":          &bintree{_005_mul_changesDownSql, map[string]*bintree{}},
	"005_mul_changes.up.sql":            &bintree{_005_mul_changesUpSql, map[string]*bintree{}},
	"006_rename_system_tables.down.sql": &bintree{_006_rename_system_tablesDownSql, map[string]*bintree{}},
	"006_rename_system_tables.up.sql":   &bintree{_006_rename_system_tablesUpSql, map[string]*bintree{}},
	"007_acl.down.sql":                  &bintree{_007_aclDownSql, map[string]*bintree{}},
	"007_acl.up.sql":                    &bintree{_007_aclUpSql, map[string]*bintree{}},
	"008_txn_processor.down.sql":        &bintree{_008_txn_processorDownSql, map[string]*bintree{}},
	"008_txn_processor.up.sql":          &bintree{_008_txn_processorUpSql, map[string]*bintree{}},
	"009_nonce.down.sql":                &bintree{_009_nonceDownSql, map[string]*bintree{}},
	"009_nonce.up.sql":                  &bintree{_009_nonceUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
