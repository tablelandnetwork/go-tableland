// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x63\xc3\x98\x16\x19\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 25, mode: os.FileMode(436), modTime: time.Unix(1639565921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\xd1\x6f\x9b\x30\x10\xc6\xdf\xf9\x2b\x6e\x4f\x05\x89\x87\xbc\x57\x9d\x94\xa5\x97\x0e\x35\xa3\x1b\x21\x52\xfa\x64\x11\xfb\x96\x58\x23\x36\xb2\xcd\x44\xff\xfb\xa9\x24\xa4\x5e\x06\x29\x99\xb4\xf1\xc8\x7d\x67\xbe\xfb\x7d\x87\x67\x19\x4e\x73\x84\x7c\xfa\x69\x81\x90\xcc\x21\x7d\xca\x01\xd7\xc9\x32\x5f\x82\xa1\xad\xb4\xce\xbc\x40\x18\x00\x00\x48\x01\x49\x9a\xe3\x03\x66\xad\x28\x5d\x2d\x16\x71\x5b\xb0\xce\xd4\xdc\xd5\x86\x20\xc7\x75\x7e\x56\xe4\x5a\x39\xa3\xcb\x92\x4c\x5f\xb5\x32\xf4\x5d\x36\xbd\x7d\x86\x0a\x47\x82\x15\x6e\xe0\xab\x7c\x57\x48\xc5\xde\x4c\xc5\x41\xfb\xfa\x6b\x96\x7c\x99\x66\xcf\xf0\x88\xcf\x61\x27\x89\x41\x8a\xe8\xd0\x35\xfb\x8c\xb3\xc7\x50\x0a\xf8\x78\x07\x93\x28\x88\x6e\x83\x23\x80\x24\xbd\xc7\xf5\x69\x64\xd6\xb5\x32\xcf\xbf\x56\xa7\xba\x77\xf4\x9b\x20\xba\x0d\x82\x0b\x38\xed\x8b\x75\xb4\x67\x05\x2f\x8f\x40\x5d\xb1\x29\x89\x0d\x62\x7d\x8f\x9c\xfc\x29\x4b\xda\x92\x7d\x6d\x7f\x87\xcd\xb5\x6c\xeb\x4a\x9c\x09\x2e\xd2\xed\x06\xf9\x0d\xc6\xe1\xa4\xf9\x53\x86\xc9\x43\x3a\xd0\x10\x41\x86\x73\xcc\x30\x9d\xe1\xb2\x8f\xad\x14\x6d\x44\x23\xa8\x7a\xb0\xc2\x31\x08\xfe\x9a\xfd\x08\x0c\xfe\xaa\x41\xe8\x1d\xf5\xe1\x0e\x6e\x26\xcd\x64\xe4\x73\xf3\x9f\x11\xba\x46\x31\x43\x9c\x64\xe5\xec\x38\x88\x9b\x52\xf3\x1f\x4c\xd5\xfb\x0d\x99\x01\x89\x54\x82\x1a\x26\x15\x6b\xb5\x43\x61\x34\x8a\xed\x0a\xbb\xeb\xdb\x73\x32\x46\x1f\x42\xe8\x0f\xee\x62\x22\xbe\xc1\xf8\xcc\x8b\xff\xf3\xaf\xd2\xe4\xdb\xaa\xbb\x03\x7a\x70\xb0\x93\x43\xad\xfa\xea\x7e\x2e\x47\xe5\x78\xe6\x95\xd1\x9c\xac\xd5\x83\x9b\xeb\xcd\x76\x4d\x00\x23\x63\xaf\x48\x09\xa9\xb6\xcc\x35\xe3\x42\x2f\x84\x30\x64\x6d\x5f\x56\x43\x19\x2a\xad\x38\x0d\xed\x50\xbd\xaf\x58\x65\x24\x27\xc6\x75\xad\xfe\xbc\x91\xe0\x1e\xe7\xd3\xd5\x22\x87\xc9\xbf\xb9\xbc\x8e\xf3\xc4\x07\x97\xaf\x5b\xf1\x2b\x00\x00\xff\xff\xab\x65\xca\x9d\x13\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1811, mode: os.FileMode(436), modTime: time.Unix(1655836294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
