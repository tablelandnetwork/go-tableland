// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x63\xc3\x98\x16\x19\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 25, mode: os.FileMode(436), modTime: time.Unix(1639565921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x41\x6f\x9c\x30\x10\x85\xef\xfc\x8a\xe9\x29\x20\x71\xe0\x5e\xa5\x12\xa5\x26\x45\xa1\xa4\x22\x8e\x94\x9c\x2c\xd6\x9e\xee\x5a\x65\x6d\x64\x9b\x8a\xfc\xfb\x2a\x2c\x51\xe8\x16\xef\xb2\x95\x1a\x8e\xcc\x1b\x7b\xe6\x7b\x4f\xce\x6a\x92\x52\x02\x34\xfd\x5c\x12\x28\x72\xa8\xee\x28\x90\xc7\xe2\x9e\xde\x83\xc1\xad\xb4\xce\x3c\x43\x18\x00\x00\x48\x01\x45\x45\xc9\x0d\xa9\x47\x51\xf5\x50\x96\xf1\x58\xb0\xce\xf4\xdc\xf5\x06\x81\x92\x47\x7a\x54\xe4\x5a\x39\xa3\xdb\x16\xcd\x52\xb5\x33\xf8\x43\x0e\x8b\x7d\x06\x1b\x87\x82\x35\xce\x73\x2b\xdf\x35\x52\xb1\xb7\xa1\xe2\x60\xfc\xfd\xbd\x2e\xbe\xa5\xf5\x13\xdc\x92\xa7\xf0\x55\x12\x83\x14\xd1\xa1\x2b\xfb\x4a\xb2\xdb\x50\x0a\xf8\x74\x0d\x49\x14\x44\x1f\x83\xe0\x04\x01\xfb\x6c\x1d\xee\x59\xc3\xdb\x89\x81\x6b\x36\x2d\x32\x2f\x89\x73\xcb\xca\x5f\xb2\xc5\x2d\xda\x97\xf6\x33\xeb\x5c\x8a\xa3\xef\xc4\x91\xe0\x24\x90\xd7\x45\xe2\xd9\xcc\x13\xa2\xfc\xae\x26\xc5\x4d\xe5\x69\x88\xa0\x26\x39\xa9\x49\x95\x91\xb7\x84\xfc\x49\x7a\x25\xd5\x19\xac\x70\x0d\x82\x7f\x66\xbf\x02\xc3\x3c\x1d\x10\xce\x8e\xfa\x70\x0d\x57\xc9\x90\xac\xfc\xae\xde\x19\xa1\x1b\x14\x33\xc8\x51\x76\xce\xae\x83\xb8\x69\x35\xff\xc9\x54\xbf\xdf\xa0\xf1\x48\xa4\x12\x38\x30\xa9\xd8\xa8\xf5\x99\x31\x28\xb6\x6b\xec\x6e\x29\xe7\x68\x8c\x3e\x98\xb0\x6c\xdc\x69\x47\xa6\x83\x2f\x41\xd0\x19\xcd\xd1\x5a\xed\x0d\xd2\xec\xaa\x4b\x78\xac\x1c\xa1\x43\x25\xa4\xda\x32\x37\xac\xf3\xa0\x11\xc2\xa0\xb5\x4b\xe8\x7c\x48\x95\x56\x1c\x7d\x96\xf6\xfb\x8e\x75\x46\x72\x64\x5c\xf7\xea\xef\x07\x02\xbe\x90\x3c\x7d\x28\x29\x24\xff\xe7\x2d\x99\xf6\x89\x0f\x53\xbe\x18\xf7\x3b\x00\x00\xff\xff\xdf\xb5\x41\x67\x55\x06\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1621, mode: os.FileMode(436), modTime: time.Unix(1655834671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
