// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x63\xc3\x98\x16\x19\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 25, mode: os.FileMode(436), modTime: time.Unix(1639565921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\xc1\x8e\x9b\x30\x10\x86\xef\x3c\xc5\xf4\x50\x01\x12\x87\xdc\x57\x5b\x29\xcd\x3a\x5b\xb4\x29\xdb\x12\x22\x65\x4f\x16\xb1\x67\x13\xab\xc4\x46\xb6\x69\xd9\xb7\xaf\x96\x90\xc4\xa5\x40\x69\x55\xb5\x1c\x99\xf9\x87\x99\xef\x1f\x66\x91\x92\x79\x46\x20\x9b\xbf\x5f\x11\x88\x97\x90\x3c\x66\x40\xb6\xf1\x3a\x5b\x83\xc6\xbd\x30\x56\xbf\x40\xe0\x01\x00\x08\x0e\x71\x92\x91\x7b\x92\x36\x49\xc9\x66\xb5\x8a\x9a\x80\xb1\xba\x62\xb6\xd2\x08\x19\xd9\x66\x9d\x20\x53\xd2\x6a\x55\x14\xa8\xfb\xa2\xa5\xc6\x67\x51\xf7\xea\x34\xe6\x16\x39\xcd\xed\x4f\x5f\x85\x3b\xb2\x9c\x6f\x56\x19\x04\xc6\xea\x67\x2b\x8e\x18\xf8\x6f\x8d\x1f\x81\x2f\xd5\x37\x3f\x0c\xdb\x02\x87\x5c\x48\x7a\x6d\x3a\xf2\x9a\xd7\x9f\xd2\xf8\xe3\x3c\x7d\x82\x07\xf2\x14\x9c\x53\x22\x10\xbc\x55\x2d\x3e\x90\xc5\x43\x20\x38\xbc\xbb\x85\x59\xe8\x85\x37\x5e\x0b\x28\x4e\xee\xc8\xf6\x82\x84\x9e\xa5\xd4\x99\x4f\xc9\x4b\xdc\x29\x7d\x4d\x08\x6f\x3c\x6f\x04\xb7\x79\x31\x16\x8f\x34\x67\x45\x0b\xdc\xe6\xbb\x02\xe9\x20\xf6\x5f\x91\x15\x5f\x45\x81\x7b\x34\xaf\xf2\xae\xb4\xc3\xe6\x6f\xb3\xaf\x4a\xde\x29\x30\x4a\xff\x3c\xe8\x0f\xb0\x4e\x95\x96\x8f\x29\x89\xef\x93\x01\x41\x08\x29\x59\x92\x94\x24\x0b\xb2\xee\x63\x2f\x78\x63\xe1\x04\xea\x0e\xcc\x60\x0a\xa2\x3f\xf6\x66\x02\x06\x77\x15\x21\x70\x4a\xbd\xb9\x05\x7f\x56\xcf\x26\x3e\xfe\x3f\x46\x68\x6b\x49\x35\x32\x14\xa5\x35\xd3\x20\xee\x0a\xc5\xbe\x50\x59\x1d\x77\xa8\x07\x52\x84\xe4\x58\x53\x21\x69\x93\x3b\x64\x46\x2d\xe9\x21\x37\x87\xbe\xff\x00\xb5\x56\x27\x13\xfa\x8d\x1b\x75\xc4\x6d\x30\xea\xf4\xe2\x1e\x87\x4d\x12\x7f\xde\x9c\x6f\x44\x0f\x0e\x7a\xe9\x50\xc9\xbe\xb8\xeb\x4b\x9b\x39\x9d\x79\xa9\x15\x43\x63\xd4\xe0\xe6\x3a\xb3\xfd\x8e\x01\x13\x6d\x2f\x51\x72\x21\xf7\xd4\xd6\xd3\x4c\xcf\x39\xd7\x68\x4c\x9f\x57\x43\x1e\x4a\x25\x19\x0e\xed\x50\x75\x2c\x69\xa9\x05\x43\xca\x54\x25\x47\x2e\xd6\xec\xff\x1c\xb7\x76\xde\xe8\x34\xc5\xeb\xd6\x7c\x0f\x00\x00\xff\xff\x0f\x48\x35\xaa\x73\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1907, mode: os.FileMode(436), modTime: time.Unix(1656355451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
